@model List<WebApplication1.Models.Kisi>

@{
    ViewData["Title"] = "Kişi Sil";
}

<h2>Kişi Sil</h2>

<input type="text" id="arama" class="form-control" placeholder="Ad veya Soyad ile ara" />
<div id="aramaSonuclari" style="margin-top: 15px;">
    @await Html.PartialAsync("_KisiListesiSil", Model)
</div>

@section Scripts {
    <script>
        const aramaInput = document.getElementById("arama");
        const aramaSonuclari = document.getElementById("aramaSonuclari");

        aramaInput.addEventListener("input", function () {
            const query = this.value.trim();

            fetch(`/Home/KisiAramaSonuclariSil?query=${encodeURIComponent(query)}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(res => res.text())
            .then(html => {
                aramaSonuclari.innerHTML = html;
                kisiSilButonlariAyarla();
            });
        });

        function kisiSilButonlariAyarla() {
            document.querySelectorAll(".kisi-sil").forEach(button => {
                button.addEventListener("click", function () {
                    const id = this.dataset.id;
                    const adsoyad = this.dataset.adsoyad;

                    if (confirm(`"${adsoyad}" adlı kişiyi silmek istediğinizden emin misiniz?`)) {
                        fetch(`/Home/KisiSil?id=${id}`, {
                            method: "POST"
                        })
                        .then(res => res.ok ? res.text() : Promise.reject())
                        .then(msg => {
                            alert(msg);
                            aramaInput.dispatchEvent(new Event("input"));
                        })
                        .catch(() => alert("Silme işlemi başarısız oldu."));
                    }
                });
            });
        }

        // Sayfa ilk yüklendiğinde silme butonlarını bağla
        kisiSilButonlariAyarla();
    </script>
}
